// ====================== –§–õ–ê–ì–ò / –ù–ê–°–¢–†–û–ô–ö–ò ======================
const ENABLE_WRAP_X = false;              // –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≥–µ—Ä–æ—è –ø–æ X
const CAM_SMOOTH = 0.08;                  // –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã (0..1)
const HERO_SPEED = 50;                   // px/s
const FIT_HEIGHT_AND_TILE_X = true;       // —Ñ–æ–Ω —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ –æ–∫–Ω–∞ (–ù–ï —Ç–∞–π–ª–∏—Ç—Å—è)
const WALKABLE_THRESHOLD = 240;           // !!! —è—Ä–∫–æ—Å—Ç—å >= 240 -> –ø—Ä–æ—Ö–æ–¥–∏–º–æ
const SEEK_RADIUS_PX = 60;                // —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ–π —Ç–æ—á–∫–∏
const DEBUG_SHOW_NAV = false;             // –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É –ø–æ–≤–µ—Ä—Ö —Å—Ü–µ–Ω—ã
const DEBUG_SHOW_TARGET = true;           // –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä—É–∂–æ–∫ —Ü–µ–ª–∏
const WALKABLE_MODE = 'brightness';       // –ø—Ä–æ–≤–µ—Ä—è–µ–º —è—Ä–∫–æ—Å—Ç—å

// ---- –∞–Ω–∏–º–∞—Ü–∏—è –≥–µ—Ä–æ—è ----
const HERO_SPRITE_COLS = 8;   // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ –†–Ø–î–£ hero.png
const HERO_SPRITE_ROWS = 1;   // —Ä—è–¥–æ–≤ –≤ hero.png (–¥–ª—è 1-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—å 1)
const HERO_IDLE_FRAME = 0;    // –∏–Ω–¥–µ–∫—Å –∫–∞–¥—Ä–∞ –ø—Ä–æ—Å—Ç–æ—è
const HERO_WALK_FPS = 10;     // –±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
const HERO_WALK_FPS_MAX = 16; // –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ FPS –ø—Ä–∏ –±–æ–ª—å—à–æ–º HERO_SPEED

// —Ä–∞–∑–º–µ—Ä –≥–µ—Ä–æ—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞
const HERO_VH = 2;     // 20% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
const HERO_MIN_PX = 40;
const HERO_MAX_PX = 100;


// ====================== –ö–ê–ù–í–ê–° ======================
const DPR = Math.max(1, Math.min(window.devicePixelRatio || 1, 2));
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d', { alpha: false });

let viewW = 0, viewH = 0;                 // —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ (CSS px)
let worldW = 0, worldH = 0;               // —Ä–∞–∑–º–µ—Ä—ã —Å—Ü–µ–Ω—ã (–≤ –º–∏—Ä–æ–≤—ã—Ö px –∏—Å—Ö–æ–¥–Ω–∏–∫–∞)
let xScale = 1, yScale = 1;               // —ç–∫—Ä–∞–Ω–Ω—ã—Ö px –Ω–∞ 1 –º–∏—Ä–æ–≤–æ–π px
const cam = { x: 0, y: 0 };               // –ª–µ–≤—ã–π –≤–µ—Ä—Ö –∫–∞–º–µ—Ä—ã (–º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)

// ====================== –ì–ï–†–û–ô ======================
const hero = {
  x: 1250, y: 470,
  targetX: 1250, targetY: 470,
  speed: HERO_SPEED,
  img: null,
  w: 64, h: 64,
  anchorX: 0.5, anchorY: 0.9,

  // --- –∞–Ω–∏–º–∞—Ü–∏—è ---
  animTime: 0,
  animFrame: 0,
  facingX: 1,        // 1 = –≤–ø—Ä–∞–≤–æ, -1 = –≤–ª–µ–≤–æ (–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ X)
  srcW: 0,           // —à–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –≤ hero.png
  srcH: 0,           // –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –≤ hero.png
  row: 0             // –Ω–æ–º–µ—Ä —Ä—è–¥–∞ (–Ω–∞ —Å–ª—É—á–∞–π –º–Ω–æ–≥–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞)
};

// ====================== –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ======================
const images = {
  scene: loadImage('scene.png'),
  hero:  loadImage('hero.png'),
  nav:   loadImage('navmask.png')
};

// –æ—Ñ—Ñ—Å–∫—Ä–∏–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π –º–∞—Å–∫–∏
let navCanvas = null, navCtx = null, navData = null, navW = 0, navH = 0;

// ====================== –£–¢–ò–õ–ò–¢–´ ======================
function loadImage(src) {
  // –∞–Ω—Ç–∏-–∫—ç—à, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–æ—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const img = new Image();
  img.src = src + (src.includes('?') ? '&' : '?') + 'v=' + Date.now();
  return img;
}
function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }
function wrap(v, w)     { return ((v % w) + w) % w; }

async function waitDecode(img) {
  if (img.decode) {
    try { await img.decode(); } catch {}
  } else {
    await new Promise(res => {
      if (img.complete && img.naturalWidth) return res();
      img.onload = res; img.onerror = res;
    });
  }
}

function resizeCanvas() {
  viewW = Math.floor(window.innerWidth);
  viewH = Math.floor(window.innerHeight);
  canvas.style.width = viewW + 'px';
  canvas.style.height = viewH + 'px';
  canvas.width = Math.floor(viewW * DPR);
  canvas.height = Math.floor(viewH * DPR);
  ctx.setTransform(DPR, 0, 0, DPR, 0, 0);
}

function worldToScreen(wx, wy) {
  return { x: (wx - cam.x) * xScale, y: (wy - cam.y) * yScale };
}
function screenToWorld(sx, sy) {
  return { x: sx / xScale + cam.x, y: sy / yScale + cam.y };
}

// ====================== –ú–ê–°–ö–ê –ü–†–û–•–û–î–ò–ú–û–°–¢–ò ======================
function prepareNavMask() {
  if (!images.nav || !images.nav.naturalWidth) return;
  navW = images.nav.naturalWidth;
  navH = images.nav.naturalHeight;
  navCanvas = document.createElement('canvas');
  navCanvas.width = navW;
  navCanvas.height = navH;
  navCtx = navCanvas.getContext('2d');
  navCtx.drawImage(images.nav, 0, 0);
  navData = navCtx.getImageData(0, 0, navW, navH).data;
}

function isWalkable(wx, wy) {
  if (!navData) return false; // –º–∞—Å–∫–∏ –Ω–µ—Ç ‚Äî –≤—Å—ë –∑–∞–ø—Ä–µ—â–µ–Ω–æ

  const mx = Math.floor(clamp(wx, 0, navW - 1));
  const my = Math.floor(clamp(wy, 0, navH - 1));
  const idx = (my * navW + mx) * 4;
  const r = navData[idx], g = navData[idx + 1], b = navData[idx + 2], a = navData[idx + 3];

  if (WALKABLE_MODE === 'alpha') {
    return a >= WALKABLE_THRESHOLD;
  } else if (WALKABLE_MODE === 'combined') {
    const brightness = (r + g + b) / 3;
    const score = Math.max(brightness, a);
    return score >= WALKABLE_THRESHOLD;
  } else { // 'brightness'
    const brightness = (r + g + b) / 3;
    return brightness >= WALKABLE_THRESHOLD;
  }
}

// –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ–π —Ç–æ—á–∫–∏ (–∫–æ–ª—å—Ü–∞)
function findNearestWalkable(wx, wy, radiusPx = SEEK_RADIUS_PX, step = 2) {
  if (isWalkable(wx, wy)) return { x: wx, y: wy, ok: true };

  for (let r = step; r <= radiusPx; r += step) {
    for (let x = wx - r; x <= wx + r; x += step) {
      if (isWalkable(x, wy - r)) return { x, y: wy - r, ok: true };
      if (isWalkable(x, wy + r)) return { x, y: wy + r, ok: true };
    }
    for (let y = wy - r + step; y <= wy + r - step; y += step) {
      if (isWalkable(wx - r, y)) return { x: wx - r, y, ok: true };
      if (isWalkable(wx + r, y)) return { x: wx + r, y, ok: true };
    }
  }
  return { x: wx, y: wy, ok: false };
}

// –ø—Ä–æ–µ–∫—Ü–∏—è —Ü–µ–ª–∏ –≤–¥–æ–ª—å –ø—Ä—è–º–æ–π (–æ—Ç –∫–ª–∏–∫–∞ –∫ –≥–µ—Ä–æ—é)
function projectTargetToWalkable(fromX, fromY, toX, toY, step = 3, maxSteps = 300) {
  let dx = toX - fromX, dy = toY - fromY;
  const len = Math.hypot(dx, dy) || 1;
  dx /= len; dy /= len;

  let x = toX, y = toY;
  for (let i = 0; i < maxSteps; i++) {
    if (isWalkable(x, y)) return { x, y, ok: true };
    x -= dx * step;
    y -= dy * step;
  }
  return findNearestWalkable(toX, toY, SEEK_RADIUS_PX);
}

// ====================== –í–í–û–î ======================
canvas.addEventListener('pointerdown', (e) => {
  const rect = canvas.getBoundingClientRect();
  const sx = e.clientX - rect.left;
  const sy = e.clientY - rect.top;
  let { x: wx, y: wy } = screenToWorld(sx, sy);

  // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ Y —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –º–∏—Ä–∞ (—Ñ–æ–Ω –Ω–µ —Ç–∞–π–ª–∏—Ç—Å—è –ø–æ Y)
  const padY = hero.h * hero.anchorY;
  wy = clamp(wy, padY, worldH - (hero.h - padY));

  // –ñ–Å–°–¢–ö–û: —Å—Ç–∞–≤–∏–º —Ü–µ–ª—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏–º—É—é —Ç–æ—á–∫—É
  const snapped = projectTargetToWalkable(hero.x, hero.y, wx, wy);
  if (snapped.ok) {
    hero.targetX = snapped.x;
    hero.targetY = snapped.y;
  } else {
    console.log('üö´ –ö–ª–∏–∫ –≤–Ω–µ –¥–æ—Ä–æ–≥–∏ ‚Äî —Ü–µ–ª—å –Ω–µ –ø–æ–º–µ–Ω—è–Ω–∞');
  }
});

// ====================== –¶–ò–ö–õ ======================
let last = performance.now();
function loop(now) {
  const dt = Math.min(0.033, (now - last) / 1000);
  last = now;
  update(dt);
  render();
  requestAnimationFrame(loop);
}

function update(dt) {
  const dx = hero.targetX - hero.x;
  const dy = hero.targetY - hero.y;
  const d = Math.hypot(dx, dy);

  if (d > 1) {
    const step = hero.speed * dt;
    const t = Math.min(1, step / d);
    const nextX = hero.x + dx * t;
    const nextY = hero.y + dy * t;

    // –∫–æ–ª–ª–∏–∑–∏–∏: –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –º–∞—Å–∫—É
    if (isWalkable(nextX, nextY)) {
      hero.x = nextX; hero.y = nextY;
    } else if (isWalkable(nextX, hero.y)) {
      hero.x = nextX;
    } else if (isWalkable(hero.x, nextY)) {
      hero.y = nextY;
    } else {
      // —Ç—É–ø–∏–∫ ‚Äî —Å—Ç–æ–ø–∞–µ–º —Ü–µ–ª—å
      hero.targetX = hero.x;
      hero.targetY = hero.y;
    }
  }

  // -------- –∞–Ω–∏–º–∞—Ü–∏—è --------
  const moving = d > 1;
  if (moving) {
    // —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ X
    if (Math.abs(dx) > 0.0001) hero.facingX = Math.sign(dx);

    // –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º fps –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    const speedK = clamp(hero.speed / 280, 0.7, 1.3); // 280 ‚Äî –±–∞–∑–æ–≤—ã–π HERO_SPEED
    const fps = clamp(HERO_WALK_FPS * speedK, HERO_WALK_FPS, HERO_WALK_FPS_MAX);

    hero.animTime += dt * fps;
    const framesInRow = HERO_SPRITE_COLS;
    // –∫–∞–¥—Ä 0 ‚Äî idle, —Ö–æ–¥—å–±–∞ –ø–æ –∫–∞–¥—Ä–∞–º 1..framesInRow-1
    hero.animFrame = HERO_IDLE_FRAME + 1 + (Math.floor(hero.animTime) % (framesInRow - 1));
  } else {
    hero.animTime = 0;
    hero.animFrame = HERO_IDLE_FRAME;
  }

  // safety: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–∫–∞–∑–∞–ª–∏—Å—å –≤–Ω–µ –±–µ–ª–æ–π –∑–æ–Ω—ã ‚Äî –≤–µ—Ä–Ω—ë–º –±–ª–∏–∂–∞–π—à—É—é
  if (!isWalkable(hero.x, hero.y)) {
    const safe = findNearestWalkable(hero.x, hero.y, 60);
    if (safe.ok) {
      hero.x = safe.x; hero.y = safe.y;
      hero.targetX = safe.x; hero.targetY = safe.y;
    } else {
      hero.targetX = hero.x;
      hero.targetY = hero.y;
    }
  }

  // –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ X (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  if (ENABLE_WRAP_X && worldW > 0) {
    hero.x = wrap(hero.x, worldW);
    hero.targetX = wrap(hero.targetX, worldW);
  }

  // –∫–∞–º–µ—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞ –ø–æ X –∏ Y
  const maxCamX = Math.max(0, worldW - (viewW / xScale));
  const maxCamY = Math.max(0, worldH - (viewH / yScale));
  const desiredCamX = clamp(hero.x - (viewW / (2 * xScale)), 0, maxCamX);
  const desiredCamY = clamp(hero.y - (viewH / (2 * yScale)), 0, maxCamY);
  cam.x += (desiredCamX - cam.x) * CAM_SMOOTH;
  cam.y += (desiredCamY - cam.y) * CAM_SMOOTH;
}

// ====================== –†–ï–ù–î–ï–† ======================
function render() {
  ctx.clearRect(0, 0, viewW, viewH);

  // —Ñ–æ–Ω ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –±–µ–∑ —Ç–∞–π–ª–∏–Ω–≥–∞
  if (images.scene.complete && images.scene.naturalWidth) {
    const tex = images.scene;
    const texW = tex.naturalWidth;
    const texH = tex.naturalHeight;

    if (FIT_HEIGHT_AND_TILE_X) {
      const scaledW = texW * xScale;     // xScale === yScale
      const offsetX = -cam.x * xScale;
      ctx.drawImage(tex, 0, 0, texW, texH,
                    Math.round(offsetX), 0,
                    Math.ceil(scaledW), viewH);
    } else {
      const sx = Math.floor(clamp(cam.x, 0, Math.max(0, texW - (viewW / xScale))));
      const sy = Math.floor(clamp(cam.y, 0, Math.max(0, texH - (viewH / yScale))));
      const sw = Math.min(Math.floor(viewW / xScale), texW);
      const sh = Math.min(Math.floor(viewH / yScale), texH);
      ctx.drawImage(tex, sx, sy, sw, sh, 0, 0, Math.ceil(sw * xScale), Math.ceil(sh * yScale));
    }
  } else {
    ctx.fillStyle = '#222';
    ctx.fillRect(0, 0, viewW, viewH);
  }

  // DEBUG: –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É –ø–æ–≤–µ—Ä—Ö —Å—Ü–µ–Ω—ã
  if (DEBUG_SHOW_NAV && navCanvas) {
    const sx = Math.floor(clamp(cam.x, 0, Math.max(0, navW - (viewW / xScale))));
    const sy = Math.floor(clamp(cam.y, 0, Math.max(0, navH - (viewH / yScale))));
    const sw = Math.min(Math.floor(viewW / xScale), navW);
    const sh = Math.min(Math.floor(viewH / yScale), navH);
    ctx.globalAlpha = 0.3;
    ctx.drawImage(navCanvas, sx, sy, sw, sh, 0, 0, Math.ceil(sw * xScale), Math.ceil(sh * yScale));
    ctx.globalAlpha = 1.0;
  }

  // –≥–µ—Ä–æ–π (—Ä–∏—Å—É–µ–º –¢–ï–ö–£–©–ò–ô –ö–ê–î–† –∏–∑ —Å–ø—Ä–∞–π—Ç-–ª–∏—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ X)
  if (hero.img && hero.img.complete && hero.img.naturalWidth) {
    const { x, y } = worldToScreen(hero.x, hero.y);
    const drawX = Math.round(x - hero.w * hero.anchorX);
    const drawY = Math.round(y - hero.h * hero.anchorY);

    const sx = hero.animFrame * hero.srcW;
    const sy = hero.row * hero.srcH;
    const sw = hero.srcW;
    const sh = hero.srcH;

    ctx.imageSmoothingEnabled = true;

    if (hero.facingX >= 0) {
      ctx.drawImage(hero.img, sx, sy, sw, sh, drawX, drawY, hero.w, hero.h);
    } else {
      ctx.save();
      ctx.translate(drawX + hero.w / 2, drawY + hero.h / 2);
      ctx.scale(-1, 1);
      ctx.drawImage(hero.img, sx, sy, sw, sh, -hero.w / 2, -hero.h / 2, hero.w, hero.h);
      ctx.restore();
    }
  }

  // DEBUG: —Ü–µ–ª—å
  if (DEBUG_SHOW_TARGET) {
    const tx = worldToScreen(hero.targetX, hero.targetY);
    ctx.beginPath();
    ctx.arc(tx.x, tx.y, 6, 0, Math.PI * 2);
    ctx.lineWidth = 2;
    ctx.strokeStyle = isWalkable(hero.targetX, hero.targetY) ? '#31d158' : '#ff3b3b';
    ctx.stroke();
  }
}

// ====================== –†–ê–ó–ú–ï–† –ì–ï–†–û–Ø –û–¢ –≠–ö–†–ê–ù–ê ======================
function applyHeroSizeFromScreen() {
  // —Ä–∞–∑–º–µ—Ä—ã –û–î–ù–û–ì–û –∫–∞–¥—Ä–∞ –≤ —Å–ø—Ä–∞–π—Ç–µ
  const frameW = (images.hero.naturalWidth  || 1) / HERO_SPRITE_COLS;
  const frameH = (images.hero.naturalHeight || 1) / HERO_SPRITE_ROWS;
  const aspect = frameW / frameH;

  let targetH = Math.round(viewH * HERO_VH);
  targetH = clamp(targetH, HERO_MIN_PX, HERO_MAX_PX);

  hero.h = targetH;
  hero.w = Math.round(targetH * aspect);
}

// ====================== –ó–ê–ü–£–°–ö ======================
async function boot() {
  resizeCanvas();
  window.addEventListener('resize', () => {
    resizeCanvas();
    recomputeScales();
    applyHeroSizeFromScreen();
  });

  await Promise.all([waitDecode(images.scene), waitDecode(images.hero), waitDecode(images.nav)]);

  // —Ä–∞–∑–º–µ—Ä—ã –º–∏—Ä–∞ –ø–æ –∏—Å—Ö–æ–¥–Ω–∏–∫—É
  worldW = images.scene.naturalWidth;
  worldH = images.scene.naturalHeight;

  // –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∞—Å–∫—É
  prepareNavMask();

  // –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (xScale/yScale)
  recomputeScales();

  // —Ä–∞–∑–º–µ—Ä –≥–µ—Ä–æ—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏

  hero.img = images.hero;
  hero.srcW = Math.floor(images.hero.naturalWidth  / HERO_SPRITE_COLS);
  hero.srcH = Math.floor(images.hero.naturalHeight / HERO_SPRITE_ROWS);
  applyHeroSizeFromScreen(); // <-- –ø–æ—Å–ª–µ srcW/srcH


  // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ ‚Äî —Å—Ä–∞–∑—É –∫ –≥–µ—Ä–æ—é –∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
  const maxCamX = Math.max(0, worldW - (viewW / xScale));
  const maxCamY = Math.max(0, worldH - (viewH / yScale));
  cam.x = clamp(hero.x - (viewW / (2 * xScale)), 0, maxCamX);
  cam.y = clamp(hero.y - (viewH / (2 * yScale)), 0, maxCamY);

  requestAnimationFrame(loop);
}

function recomputeScales() {
  if (!images.scene.naturalWidth) return;
  if (FIT_HEIGHT_AND_TILE_X) {
    yScale = viewH / images.scene.naturalHeight;
    xScale = yScale; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–ø–µ–∫—Ç
  } else {
    xScale = 1; yScale = 1;
  }
}

boot();
